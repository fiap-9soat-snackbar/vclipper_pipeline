name: VClipper Destroy Pipeline

on:
  workflow_dispatch:

jobs:

  destroy-global:
    runs-on: ubuntu-latest
    #needs: destroy-services
    #if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/vclipper_infra'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Destroy Global
        working-directory: eks
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: |
          terraform init -backend-config="bucket=${{ vars.BUCKET_S3 }}"
          terraform destroy -auto-approve -var="bucket=${{ vars.BUCKET_S3 }}"

  destroy-services:
    runs-on: ubuntu-latest
    if: false

    strategy:
      matrix:
        path:
          #- services/network/vpc
          - services/compute/securitygroup
          - services/rds
          - services/mongodb
          - services/lambda
          - services/sqs
          - services/sns-notifications
          - services/frontend-hosting
          - services/video-storage
          - services/cognito
          - services/api-gateway
          - services/monitoring
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/vclipper_infra'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Create .tfvars if needed
        working-directory: ${{ matrix.path }}
        run: |
          if [[ "${{ matrix.path }}" == "services/rds" ]]; then
            echo 'db_password="${{ secrets.RDS_PASSWORD }}"' > variables.auto.tfvars
          elif [[ "${{ matrix.path }}" == "services/mongodb" ]]; then
            echo 'org_id="${{ secrets.ORG_ID }}"
            aws_nat_gateway="fake-ip"
            mongodb_cluster_name="${{ vars.MONGO_HOST }}"
            mongodbatlas_org_public_key="${{ secrets.MONGODBATLAS_ORG_PUBLIC_KEY }}"
            mongodbatlas_org_private_key="${{ secrets.MONGODBATLAS_ORG_PRIVATE_KEY }}"
            mongodbatlas_username="${{ secrets.MONGODBATLAS_USERNAME }}"
            mongodbatlas_password="${{ secrets.MONGODBATLAS_PASSWORD }}"
            MONGODB_USER="${{ secrets.MONGODB_USER }}"
            MONGODB_PASSWORD="${{ secrets.MONGODB_PASSWORD }}"' > variables.auto.tfvars
          elif [[ "${{ matrix.path }}" == "services/lambda" ]]; then
            echo 'jwt_secret="${{ secrets.JWT_SECRET }}"' > variables.auto.tfvars
          fi

      - name: Destroy ${{ matrix.path }}
        working-directory: ${{ matrix.path }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: |
          terraform init -backend-config="bucket=${{ vars.BUCKET_S3 }}"
          terraform destroy -auto-approve -var="bucket=${{ vars.BUCKET_S3 }}"
